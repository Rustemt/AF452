@model ProductVariantQuoteListModel
@using Telerik.Web.Mvc.UI;
@using System.Globalization;
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-promotions.png")" alt="" />
            @T("Admin.PriceOffers")
        </div>
    </div>
     <table width="100%">
         <tr>
             <td class="adminTitle">
                 @Html.NopLabelFor(model => model.SearchEmail):
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => Model.SearchEmail)
             </td>
         </tr>
         <tr>
             <td class="adminTitle">
                 @Html.NopLabelFor(model => model.SearchDescription):
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => Model.SearchDescription)
             </td>
         </tr>
         <tr>
             <td class="adminTitle">
                 @Html.NopLabelFor(model => model.SearchSku):
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => Model.SearchSku)
             </td>
         </tr>
         <tr>
             <td class="adminTitle">
                 @Html.NopLabelFor(model => model.SearchRequestDateFrom):
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => Model.SearchRequestDateFrom)
             </td>
         </tr>
         <tr>
             <td class="adminTitle">
                 @Html.NopLabelFor(model => model.SearchRequestDateTo):
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => Model.SearchRequestDateTo)
             </td>
         </tr>
        <tr>
            <td colspan="2">
                <button type="submit" id="search-priceOffers" value="search-priceOffers" class="t-button">@T("Admin.Common.Search")</button>     
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<ProductVariantQuoteModel>(Model.ProductVariantQuotes.Data)
                .Name("priceoffer-grid")
                        .DataKeys(x =>
                        {
                            x.Add(y => y.Id).RouteKey("Id");
                        })
                      .Columns(columns =>
                      {
                          columns.Bound(x => x.Name).ReadOnly();
                          columns.Bound(x => x.Email).ReadOnly();
                          columns.Bound(x => x.PhoneNumber).ReadOnly();
                          columns.Bound(x => x.Enquiry).ReadOnly();
                          columns.Bound(x => x.ManufacturerName).ReadOnly();
                          columns.Bound(x => x.ProductName).ReadOnly();
                          columns.Bound(x => x.Sku).ReadOnly();
                          columns.Bound(x => x.ProductVariantPrice.Price).ReadOnly();
                          columns.Bound(x => x.ProductVariantPrice.PriceWithDiscount).ReadOnly();
                          columns.Bound(x => x.ProductVariantPrice.DiscountPercentage).ReadOnly();
                          columns.Bound(x => x.PriceWithDiscount).ReadOnly();
                          columns.Bound(x => x.PriceWithoutDiscount).ReadOnly();
                          columns.Bound(x => x.DiscountPercentage).ReadOnly();
                          columns.Bound(x => x.RequestDate).ReadOnly();
                          columns.Bound(x => x.ActivateDate).ReadOnly();
                          columns.Bound(x => x.Description).Width(150);
                          columns.Command(commands =>
                          {
                              commands.Edit();
                          });
                      })
                      //.Pageable(settings => settings.Total(Model.ProductVariantQuotes.Total).PageSize(gridPageSize).Position(GridPagerPosition.Both))
                      //.Editable(x =>
                      //{
                      //    x.Mode(GridEditMode.InLine);
                      //})
                      //.DataBinding(dataBinding =>
                      //{
                      //    dataBinding.Ajax().Select("QuotesList", "CustomerProductQuote")
                      //          .Update("QuoteUpdate", "CustomerProductQuote");
                      //})
        //.DataBinding(dataBinding => dataBinding.Ajax()
        // .Select("QuotesList", "CustomerProductQuote"))

     @*   .Pageable(settings => settings.Total(Model.ProductVariantQuotes.Total).PageSize(gridPageSize).Position(GridPagerPosition.Both))
                        .DataBinding(dataBinding => dataBinding.Ajax()
            .Select("List", "CustomerProductQuote")
            .Update("QuoteUpdate", "CustomerProductQuote"))
                            .ClientEvents(events => events.OnDataBinding("onDataBinding"))
                            .ClientEvents(x => x.OnError("grid_onError"))
                .EnableCustomBinding(true))
*@
       
        .Pageable(settings => settings.Total(Model.ProductVariantQuotes.Total).PageSize(gridPageSize).Position(GridPagerPosition.Both))
 .Editable(x =>
 {
     x.Mode(GridEditMode.InLine);
 })
         .DataBinding(dataBinding =>
            {
                dataBinding.Ajax().Select("QuoteList", "CustomerProductQuote",Model)
                    .Update("QuoteUpdate", "CustomerProductQuote");
            })
        .ClientEvents(events => events.OnDataBinding("onDataBinding"))
        .ClientEvents(x => x.OnError("grid_onError"))
        .EnableCustomBinding(true))                      
                      
              
                      
                      
              @*         .Pageable(settings => settings.Total(Model.ProductVariantQuotes.Total).PageSize(gridPageSize).Position(GridPagerPosition.Both))
                        .DataBinding(dataBinding => dataBinding.Ajax()
            .Select("List", "CustomerProductQuote")
            .Update("QuoteUpdate", "CustomerProductQuote"))
                            .ClientEvents(events => events.OnDataBinding("onDataBinding"))
                            .ClientEvents(x => x.OnError("grid_onError"))
                        .EnableCustomBinding(true))*@
            </td>
        </tr>
    </table>
     <script type="text/javascript">
         $(document).ready(function () {
             $('#search-priceOffers').click(function () {
                 var grid = $('#priceoffer-grid').data('tGrid');
                 grid.currentPage = 1; //new search. Set page size to 1
                 grid.ajaxRequest();
                 return false;
             });
         });

         function onDataBinding(e) {
             var searchModel = {
                 SearchEmail: $('#@Html.FieldIdFor(model => model.SearchEmail)').val(),
                 SearchRequestDateFrom: $('#@Html.FieldIdFor(model => model.SearchRequestDateFrom)').val(),
                 SearchRequestDateTo: $('#@Html.FieldIdFor(model => model.SearchRequestDateTo)').val(),
                 SearchDescription: $('#@Html.FieldIdFor(model => model.SearchDescription)').val(),
                 SearchSku: $('#@Html.FieldIdFor(model => model.SearchSku)').val()
             };
             e.data = searchModel;
         }

         function grid_onError(e) {
             alert(e.XMLHttpRequest.responseText);
             e.preventDefault();
         }
    </script>  
}